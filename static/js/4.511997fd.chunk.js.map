{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthredirect.tsx","components/Dialogs/DialogItem/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","resProps","to","Dialog","path","id","className","s","dialog","active","name","Message","message","title","maxLength20","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","DialogsContainer","compose","dialogsPage","dispatch","sendMessage","newMessageBody","addMessageActionCreator","dialogElement","dialogsData","map","d","messageElement","messageData","m","dialogs","dialogsItems","messages","values"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,iICS1IC,EAA6B,SAACC,GAChC,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIjB,SAASE,EAAoBC,GASjC,OADoCC,YAAQN,EAARM,EANpC,SAA2BC,GACvB,IAAKL,EAAuBK,EAAvBL,OAAWM,EAAhB,YAA4BD,EAA5B,GACA,OAAKL,EACE,cAACG,EAAD,eAAeG,IADF,cAAC,IAAD,CAAUC,GAAI,gB,mICV7BC,EAAS,SAACH,GACnB,IAAII,EAAO,YAAcJ,EAAMK,GAG/B,OACI,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,eAAC,IAAD,CAASP,GAAIE,EAAb,UAAoBJ,EAAMU,KAA1B,UCNCC,EAAU,SAACX,GACpB,OAAc,sBAAKM,UAAWC,IAAEK,QAAlB,cAA6BZ,EAAMa,MAAnC,Q,kCC4BdC,EAAYC,YAAiB,IAc3BC,EAAsBC,YAAwB,CAACC,KAAM,wBAA/BD,EAb6C,SAACjB,GACtE,OACI,uBAAMmB,SAAUnB,EAAMoB,aAAtB,UACI,8BAAK,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,YAAa,qBACbd,KAAM,iBACNe,SAAU,CAACC,IAAUZ,OAEjC,8BACI,0D,iCCxBHa,EAAmBC,YAC5B7B,aAbkB,SAACL,GACnB,MAAO,CACHmC,YAAanC,EAAMmC,gBAGF,SAACC,GACtB,MAAO,CACHC,YAAa,SAACC,GACVF,EAASG,YAAwBD,SAMzCnC,IAF4B+B,EDTT,SAAC5B,GAEpB,IAAIN,EAAQM,EAAM6B,YACdK,EAAgBxC,EAAMyC,YAAYC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAQ3B,KAAM2B,EAAE3B,KAAiBL,GAAIgC,EAAEhC,IAAZgC,EAAEhC,OACxEiC,EAAiB5C,EAAM6C,YAAYH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAS3B,MAAO2B,EAAE5B,SAAc4B,EAAEnC,OAKlF,OACI,sBAAKC,UAAWC,IAAEkC,QAAlB,UACI,qBAAKnC,UAAWC,IAAEmC,aAAlB,SACKR,IAEL,sBAAK5B,UAAWC,IAAEoC,SAAlB,UACI,8BACI,cAAC3B,EAAD,CAAqBG,SAVjB,SAACyB,GACjB5C,EAAM+B,YAAYa,EAAOZ,qBAWhBM","file":"static/js/4.511997fd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3ivNy\",\"dialogsItems\":\"Dialogs_dialogsItems__jHviH\",\"active\":\"Dialogs_active__2otVf\",\"messages\":\"Dialogs_messages__3OmLT\"};","import React, {Component, ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {RootReduxStoreType} from \"../Redux/redux-store\";\nimport {connect} from \"react-redux\";\nimport {ProfileUserType} from \"../components/profile/ProfileContainer\";\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\n\nlet mapStateToPropsForRedirect = (state: RootReduxStoreType): mapStateToPropsType => {\n  return {\n      isAuth: state.auth.isAuth\n  }\n}\n\nexport  function withAuthRedirect<T>(Component: ComponentType<T>){\n\n    function RedirectComponent(props: mapStateToPropsType) {\n        let {isAuth, ...resProps} = props\n        if (!isAuth) return <Redirect to={'/login'}/>\n        return <Component {...resProps as T}/>\n    }\n\n    let ConnectedAuthRedirectComponent =connect(mapStateToPropsForRedirect)(RedirectComponent)\n    return ConnectedAuthRedirectComponent\n}","import React from 'react';\nimport s from './../Dialogs.module.css'\nimport {NavLink} from \"react-router-dom\";\n\ntype itemPropsType = {\n    id: number,\n    name: string,\n}\n\n\nexport const Dialog = (props: itemPropsType) => {\n    let path = '/dialogs/' + props.id\n\n\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={path}>{props.name} </NavLink></div>\n    )\n}\n\n\n","import React from 'react';\nimport s from './../Dialogs.module.css'\n\n\n\n\n\ntype messagePropsType = {\n    title: string\n}\nexport const Message = (props: messagePropsType) => {\n    return        <div className={s.message}> {props.title} </div>\n\n}\n","import React from 'react';\nimport s from './Dialogs.module.css'\nimport {Dialog} from \"./DialogItem/Dialog\";\nimport {Message} from \"./Message/Message\";\nimport {DialogsPageType} from '../../Redux/dialog-reducer';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../common/formControls/FormControls\";\nimport {maxLengthCreator, required} from \"../../utils/validators\";\n\nexport type FormDataType = {\n    newMessageBody: string\n}\nexport type DialogsPropsType = {\n    sendMessage: (newMessageBody: string) => void\n    dialogsPage: DialogsPageType,\n}\nexport const Dialogs = (props: DialogsPropsType) => {\n\n    let state = props.dialogsPage\n    let dialogElement = state.dialogsData.map(d => <Dialog name={d.name} key={d.id} id={d.id}/>)\n    let messageElement = state.messageData.map(m => <Message title={m.message} key={m.id}/>)\n\n    let addNewMessage = (values: FormDataType) => {\n        props.sendMessage(values.newMessageBody)\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogElement}\n            </div>\n            <div className={s.messages}>\n                <div>\n                    <AddMessageReduxForm onSubmit={addNewMessage}/>\n                </div>\n                {messageElement}\n            </div>\n        </ div>\n    )\n}\nlet maxLength20=maxLengthCreator(20)\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div><Field component={Textarea}\n                        placeholder={'enter your message'}\n                        name={'newMessageBody'}\n                        validate={[required, maxLength20]}\n            /></div>\n            <div>\n                <button> Add message</button>\n            </div>\n        </form>)\n}\nconst AddMessageReduxForm = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from 'react';\nimport {Dialogs} from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {RootReduxStoreType} from \"../../Redux/redux-store\";\nimport {compose, Dispatch} from \"redux\";\nimport {addMessageActionCreator} from \"../../Redux/dialog-reducer\";\nimport {withAuthRedirect} from \"../../hoc/withAuthredirect\";\n\n\ntype MapStateToPropsDialogsType = {\n    sendMessage: (newMessageBody: string) => void;\n}\n\nlet mapStateToProps = (state: RootReduxStoreType) => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapStateToPropsDialogsType => {\n    return {\n        sendMessage: (newMessageBody) => {\n            dispatch(addMessageActionCreator(newMessageBody))\n        }\n    }\n}\nexport const DialogsContainer = compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)"],"sourceRoot":""}