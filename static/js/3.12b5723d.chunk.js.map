{"version":3,"sources":["hoc/withAuthredirect.tsx","components/profile/MyPost/ProfileInfo/ProfileInfo.module.css","components/profile/MyPost/MyPosts.module.css","components/profile/MyPost/Post/Post.module.css","components/profile/MyPost/ProfileInfo/ProfileStatusHooks.tsx","components/profile/MyPost/ProfileInfo/ProfileInfo.tsx","components/profile/MyPost/Post/Post.tsx","components/profile/MyPost/MyPosts.tsx","components/profile/MyPost/MyPostConteiner.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","resProps","to","module","exports","ProfileStatusHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","s","content","description","src","photos","small","Preloader","Post","item","message","count","MyPosts","React","memo","postElement","likesCount","map","m","id","postsBlock","MyNewReduxPost","onSubmit","val","addPost","addNewPost","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostsContainer","compose","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","getUserProfile","Number","getStatus","withRouter"],"mappings":"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","file":"static/js/3.12b5723d.chunk.js","sourcesContent":["import React, {Component, ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {RootReduxStoreType} from \"../Redux/redux-store\";\nimport {connect} from \"react-redux\";\nimport {ProfileUserType} from \"../components/profile/ProfileContainer\";\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\n\nlet mapStateToPropsForRedirect = (state: RootReduxStoreType): mapStateToPropsType => {\n  return {\n      isAuth: state.auth.isAuth\n  }\n}\n\nexport  function withAuthRedirect<T>(Component: ComponentType<T>){\n\n    function RedirectComponent(props: mapStateToPropsType) {\n        let {isAuth, ...resProps} = props\n        if (!isAuth) return <Redirect to={'/login'}/>\n        return <Component {...resProps as T}/>\n    }\n\n    let ConnectedAuthRedirectComponent =connect(mapStateToPropsForRedirect)(RedirectComponent)\n    return ConnectedAuthRedirectComponent\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__2amc8\",\"description\":\"ProfileInfo_description__3vU8B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__20OTL\",\"postsBlock\":\"MyPosts_postsBlock__3W2vS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3I7SE\"};","import React, {ChangeEvent, ChangeEventHandler, useEffect, useState} from \"react\";\nimport s from './ProfileInfo.module.css';\nimport {Preloader} from \"../../../common/preloader/Preloader\";\nimport {mapStateToPropsType} from \"../../ProfileContainer\";\n\n\ntype StatusType = {\n    status: string,\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatusHooks =(props: StatusType)=> {\n\n       let[editMode,setEditMode]  =useState(false)\n       let[status,setStatus]  =useState(props.status)\n\n    useEffect(()=>{\n       setStatus(props.status)\n    },[props.status])\n\n    const activateEditMode=()=>{\n           setEditMode(true)\n    }\n    const deactivateEditMode=()=>{\n           setEditMode(false)\n        props.updateStatus(status)\n    }\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>)=>{\n        setStatus(e.currentTarget.value)\n    }\n    return (\n        <div>\n            {!editMode &&\n            <div>\n                <span onDoubleClick={activateEditMode}>{props.status || '__________'}</span>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input onChange={onStatusChange}  autoFocus={true} onBlur={deactivateEditMode} value={status}/>\n            </div>\n            }\n        </div>)\n}\n\n\nexport default ProfileStatusHooks;","import React from \"react\";\nimport s from './ProfileInfo.module.css';\nimport {Preloader} from \"../../../common/preloader/Preloader\";\nimport {mapStateToPropsType, ProfileUserType} from \"../../ProfileContainer\";\nimport ProfileStatus from \"./ProfileStatus\";\nimport {ProfileInfoPropsType} from \"../../Profile\";\nimport ProfileStatusHooks from \"./ProfileStatusHooks\";\n\n\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    return (\n\n        <div className={s.content}>\n            <div className={s.description}>\n                <img src={props.profile.photos.small}/>\n            </div>\n            <ProfileStatusHooks status={props.status} updateStatus={props.updateStatus}/>\n        </div>\n\n    );\n}","import React from \"react\";\nimport s from './Post.module.css';\n\ntype postType={\n    message: string,\n    count: number\n}\nexport const Post = (props: postType) => {\n    return (\n\n\n                <div className={s.item}>\n                    <img src='https://shapka-youtube.ru/wp-content/uploads/2021/03/mrachnaya-avatarka-dlya-parney.jpg'/>\n                    {props.message}\n                    <div>\n                      <span> Likes </span>  {props.count}\n                    </div>\n                </div>\n\n    );\n        }\n","import React from \"react\";\n\nimport s from './MyPosts.module.css';\nimport {Post} from \"./Post/Post\";\nimport {likeCountType} from \"../../../Redux/profile-reducer\";\nimport {Field, InjectedFormProps, reduxForm,} from \"redux-form\";\nimport {required, maxLengthCreator} from \"../../../utils/validators\";\nimport {Textarea} from \"../../common/formControls/FormControls\";\nimport ProfileStatus from \"./ProfileInfo/ProfileStatus\";\n\ntype myPostsPropsType = {\n    likesCount: Array<likeCountType>,\n    addPost: (addNewPost: string) => void,\n    /*status: string,\n    updateStatus: (status: string) => void*/\n    }\ntype PostFormType = {\n    addNewPost: string\n}\n\nexport const MyPosts = React.memo((props: myPostsPropsType) => {\n\n    let postElement = props.likesCount.map(m => <Post message={m.message} key={m.id} count={m.count}/>);\n\n\n    let onAddPost = (val: PostFormType) => {\n        props.addPost(val.addNewPost);\n    }\n\n\n    return (\n        <div className={s.postsBlock}>\n            {/*<ProfileStatus status={props.status} updateStatus={props.updateStatus}/>*/}\n            <h3>My Posts</h3>\n            <div>\n\n                <MyNewReduxPost onSubmit={onAddPost}/>\n            </div>\n            <div className={s.item}>\n                {postElement}\n\n            </div>\n        </div>\n    );\n\n})\nlet maxLength10 = maxLengthCreator(10)\nexport const MyNewPost: React.FC<InjectedFormProps<PostFormType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea}\n                       name={'addNewPost'}\n                       placeholder={'your post should be here'}\n                       validate={[required, maxLength10]}/>\n            </div>\n            <div>\n                <button> Add post</button>\n            </div>\n        </form>\n    )\n}\nexport const MyNewReduxPost = reduxForm<PostFormType>({form: 'profileAddPostForm'})(MyNewPost)","import React from \"react\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {RootReduxStoreType} from \"../../../Redux/redux-store\";\nimport {compose, Dispatch} from \"redux\";\nimport {addPostActionCreator} from \"../../../Redux/profile-reducer\";\n\n\nexport type mapDispatchToPropsPostType = {\n    addPost: (addNewPost: string) => void\n\n}\n\nlet mapStateToProps = (state: RootReduxStoreType) => {\n    return {\n        likesCount: state.profilePage.likesCount\n    }\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsPostType => {\n    return {\n        addPost: (addNewPost) => {\n            dispatch(addPostActionCreator(addNewPost))\n\n        }\n    }\n}\n\nexport const MyPostsContainer = compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps))\n(MyPosts);\n\n\n","import React from \"react\";\nimport {ProfileInfo} from \"./MyPost/ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer, } from \"./MyPost/MyPostConteiner\";\nimport {ProfileUserType} from \"./ProfileContainer\";\n\nexport type ProfileInfoPropsType={\n    status: string,\n    updateStatus: (status: string) => void,\n    profile: ProfileUserType\n}\n\n\nexport const Profile = (props:ProfileInfoPropsType) => {\n    return (\n        <div >\n            <ProfileInfo profile={props.profile}\n            status={props.status}\n            updateStatus={props.updateStatus}/>\n            <MyPostsContainer />\n\n        </div>\n\n    );\n}","import React from \"react\";\nimport {Profile} from \"./Profile\";\n\nimport {connect} from \"react-redux\";\nimport {RootReduxStoreType} from \"../../Redux/redux-store\";\nimport {getStatus, getUserProfile, updateStatus} from \"../../Redux/profile-reducer\";\nimport { RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthredirect\";\nimport {compose} from \"redux\";\n\n\ntype PathParamsType = {\n    userId: string\n}\ntype PhotosProfileType = {\n    small: string,\n    large: string\n}\ntype ContactsType = {\n    facebook: string,\n    website: null,\n    vk: string,\n    twitter: string,\n    instagram: string,\n    youtube: null,\n    github: string,\n    \"mainLink\": null\n}\nexport  type ProfileUserType = {\n    aboutMe: string,\n    contacts: ContactsType,\n    lookingForAJob: boolean,\n    lookingForAJobDescription: string,\n    fullName: string,\n    userId: number,\n    photos: PhotosProfileType,\n\n}\n\nexport type mapStateToPropsType = {\n    profile: ProfileUserType,\n    status: string,\n    authorizedUserId: string,\n    auth:boolean\n}\nexport type mapDispatchToPropsType = {\n    getUserProfile: (userId: number) => void,\n    getStatus: (userId: number) => void,\n    updateStatus: (status: string) => void\n}\n\nexport type OwnProfilePropsType = mapStateToPropsType & mapDispatchToPropsType\n\ntype PropsType = RouteComponentProps<PathParamsType> & OwnProfilePropsType\n\nclass ProfileContainer extends React.Component <PropsType> {\n    componentDidMount() {\n        debugger\n       let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = /*'19079'*/this.props.authorizedUserId\n        }\n        this.props.getUserProfile(Number(userId));\n        this.props.getStatus(Number(userId))\n\n    }\n\n    render() {\n        return (\n            <Profile {...this.props} profile={this.props.profile}\n            status={this.props.status}\n            updateStatus={this.props.updateStatus}/>\n        );\n    }\n}\n\n\nlet mapStateToProps = (state: RootReduxStoreType): mapStateToPropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.id,\n    auth: state.auth.isAuth\n\n})\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)"],"sourceRoot":""}